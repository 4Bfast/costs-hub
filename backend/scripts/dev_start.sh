#!/bin/bash

# Script de desenvolvimento para CostsHub
# Inicia o backend e oferece op√ß√µes de monitoramento

echo "üöÄ COSTSHUB - MODO DESENVOLVIMENTO"
echo "=================================="
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "app/__init__.py" ]; then
    echo "‚ùå Execute este script do diret√≥rio backend/"
    exit 1
fi

# Fun√ß√£o para limpar processos ao sair
cleanup() {
    echo ""
    echo "üßπ Limpando processos..."
    pkill -f "flask run" 2>/dev/null
    pkill -f "python.*log_monitor" 2>/dev/null
    echo "‚úÖ Processos limpos"
    exit 0
}

# Configurar trap para cleanup
trap cleanup SIGINT SIGTERM

# Ativar ambiente virtual
if [ -f "venv/bin/activate" ]; then
    echo "üêç Ativando ambiente virtual..."
    source venv/bin/activate
else
    echo "‚ùå Ambiente virtual n√£o encontrado em venv/"
    echo "üí° Execute: python -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
    exit 1
fi

# Verificar se o PostgreSQL est√° rodando
echo "üóÑÔ∏è  Verificando PostgreSQL..."
if ! docker ps | grep -q postgres; then
    echo "‚ö†Ô∏è  PostgreSQL n√£o est√° rodando"
    echo "üí° Execute: cd ../docker && docker-compose up -d"
    read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Parar qualquer inst√¢ncia anterior do Flask
echo "üõë Parando inst√¢ncias anteriores do Flask..."
pkill -f "flask run" 2>/dev/null

# Limpar log anterior
echo "üßπ Limpando logs anteriores..."
> backend.log

echo ""
echo "üéØ OP√á√ïES DE EXECU√á√ÉO:"
echo "1) Iniciar backend apenas"
echo "2) Iniciar backend + monitor de logs (recomendado)"
echo "3) Apenas monitor de logs (se backend j√° est√° rodando)"
echo ""

read -p "Escolha uma op√ß√£o (1-3): " -n 1 -r
echo ""

case $REPLY in
    1)
        echo "üöÄ Iniciando apenas o backend..."
        python -m flask run --port 5001 --debug
        ;;
    2)
        echo "üöÄ Iniciando backend + monitor de logs..."
        echo ""
        
        # Iniciar Flask em background
        echo "üìã Iniciando Flask..."
        python -m flask run --port 5001 --debug > backend.log 2>&1 &
        FLASK_PID=$!
        
        # Aguardar Flask inicializar
        echo "‚è≥ Aguardando Flask inicializar..."
        sleep 3
        
        # Verificar se Flask est√° rodando
        if kill -0 $FLASK_PID 2>/dev/null; then
            echo "‚úÖ Flask iniciado com sucesso (PID: $FLASK_PID)"
            echo ""
            echo "üîç Iniciando monitor de logs..."
            echo "   Pressione Ctrl+C para parar tudo"
            echo ""
            
            # Iniciar monitor de logs
            python log_monitor.py
        else
            echo "‚ùå Falha ao iniciar Flask"
            cat backend.log
        fi
        ;;
    3)
        echo "üîç Iniciando apenas monitor de logs..."
        python log_monitor.py
        ;;
    *)
        echo "‚ùå Op√ß√£o inv√°lida"
        exit 1
        ;;
esac

# Cleanup ao final
cleanup
